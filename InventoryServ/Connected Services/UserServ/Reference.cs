//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryServ.UserServ {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServ.UserDBServSoap")]
    public interface UserDBServSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool reg(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reg", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> regAsync(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsUserPermitted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsUserPermitted(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsUserPermitted", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsUserPermittedAsync(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEmptyUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddEmptyUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddEmptyUser", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddEmptyUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFullUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        InventoryServ.UserServ.User GetFullUser(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFullUser", ReplyAction="*")]
        System.Threading.Tasks.Task<InventoryServ.UserServ.User> GetFullUserAsync(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUserById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool updateUserById(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUserById", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> updateUserByIdAsync(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUserByIdAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool updateUserByIdAdmin(int id, InventoryServ.UserServ.User Admin, InventoryServ.UserServ.User NewUsr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUserByIdAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> updateUserByIdAdminAsync(int id, InventoryServ.UserServ.User Admin, InventoryServ.UserServ.User NewUsr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool updateUser(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> updateUserAsync(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteUser(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(InventoryServ.UserServ.User usr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUserAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteUserAdmin(InventoryServ.UserServ.User Admin, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUserAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteUserAdminAsync(InventoryServ.UserServ.User Admin, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsAdmin(InventoryServ.UserServ.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(InventoryServ.UserServ.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdminUserTbl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAdminUserTbl(InventoryServ.UserServ.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAdminUserTbl", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAdminUserTblAsync(InventoryServ.UserServ.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoesEmailExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DoesEmailExist(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DoesEmailExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DoesEmailExistAsync(string email);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string fnameField;
        
        private string lnameField;
        
        private System.DateTime bDateField;
        
        private string compenyField;
        
        private string emailField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Fname {
            get {
                return this.fnameField;
            }
            set {
                this.fnameField = value;
                this.RaisePropertyChanged("Fname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Lname {
            get {
                return this.lnameField;
            }
            set {
                this.lnameField = value;
                this.RaisePropertyChanged("Lname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime BDate {
            get {
                return this.bDateField;
            }
            set {
                this.bDateField = value;
                this.RaisePropertyChanged("BDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Compeny {
            get {
                return this.compenyField;
            }
            set {
                this.compenyField = value;
                this.RaisePropertyChanged("Compeny");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserDBServSoapChannel : InventoryServ.UserServ.UserDBServSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserDBServSoapClient : System.ServiceModel.ClientBase<InventoryServ.UserServ.UserDBServSoap>, InventoryServ.UserServ.UserDBServSoap {
        
        public UserDBServSoapClient() {
        }
        
        public UserDBServSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserDBServSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserDBServSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserDBServSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public bool reg(InventoryServ.UserServ.User usr) {
            return base.Channel.reg(usr);
        }
        
        public System.Threading.Tasks.Task<bool> regAsync(InventoryServ.UserServ.User usr) {
            return base.Channel.regAsync(usr);
        }
        
        public bool IsUserPermitted(InventoryServ.UserServ.User usr) {
            return base.Channel.IsUserPermitted(usr);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserPermittedAsync(InventoryServ.UserServ.User usr) {
            return base.Channel.IsUserPermittedAsync(usr);
        }
        
        public int AddEmptyUser() {
            return base.Channel.AddEmptyUser();
        }
        
        public System.Threading.Tasks.Task<int> AddEmptyUserAsync() {
            return base.Channel.AddEmptyUserAsync();
        }
        
        public InventoryServ.UserServ.User GetFullUser(InventoryServ.UserServ.User usr) {
            return base.Channel.GetFullUser(usr);
        }
        
        public System.Threading.Tasks.Task<InventoryServ.UserServ.User> GetFullUserAsync(InventoryServ.UserServ.User usr) {
            return base.Channel.GetFullUserAsync(usr);
        }
        
        public bool updateUserById(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr, int id) {
            return base.Channel.updateUserById(OldUsr, NewUsr, id);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserByIdAsync(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr, int id) {
            return base.Channel.updateUserByIdAsync(OldUsr, NewUsr, id);
        }
        
        public bool updateUserByIdAdmin(int id, InventoryServ.UserServ.User Admin, InventoryServ.UserServ.User NewUsr) {
            return base.Channel.updateUserByIdAdmin(id, Admin, NewUsr);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserByIdAdminAsync(int id, InventoryServ.UserServ.User Admin, InventoryServ.UserServ.User NewUsr) {
            return base.Channel.updateUserByIdAdminAsync(id, Admin, NewUsr);
        }
        
        public bool updateUser(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr) {
            return base.Channel.updateUser(OldUsr, NewUsr);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserAsync(InventoryServ.UserServ.User OldUsr, InventoryServ.UserServ.User NewUsr) {
            return base.Channel.updateUserAsync(OldUsr, NewUsr);
        }
        
        public bool DeleteUser(InventoryServ.UserServ.User usr) {
            return base.Channel.DeleteUser(usr);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(InventoryServ.UserServ.User usr) {
            return base.Channel.DeleteUserAsync(usr);
        }
        
        public bool DeleteUserAdmin(InventoryServ.UserServ.User Admin, int id) {
            return base.Channel.DeleteUserAdmin(Admin, id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAdminAsync(InventoryServ.UserServ.User Admin, int id) {
            return base.Channel.DeleteUserAdminAsync(Admin, id);
        }
        
        public bool IsAdmin(InventoryServ.UserServ.User user) {
            return base.Channel.IsAdmin(user);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(InventoryServ.UserServ.User user) {
            return base.Channel.IsAdminAsync(user);
        }
        
        public System.Data.DataTable GetAdminUserTbl(InventoryServ.UserServ.User user) {
            return base.Channel.GetAdminUserTbl(user);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAdminUserTblAsync(InventoryServ.UserServ.User user) {
            return base.Channel.GetAdminUserTblAsync(user);
        }
        
        public bool DoesEmailExist(string email) {
            return base.Channel.DoesEmailExist(email);
        }
        
        public System.Threading.Tasks.Task<bool> DoesEmailExistAsync(string email) {
            return base.Channel.DoesEmailExistAsync(email);
        }
    }
}
